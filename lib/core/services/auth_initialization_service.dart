import 'dart:developer' as developer;
import 'package:joya_express/core/services/token_service.dart';
import 'package:joya_express/data/services/user_session_service.dart';
import 'package:joya_express/data/services/driver_session_service.dart';
import 'package:joya_express/core/network/api_client.dart';

/// Servicio para inicializar y verificar el estado de autenticaci√≥n
/// Asegura que los tokens est√©n disponibles antes de hacer peticiones
class AuthInitializationService {
  static final AuthInitializationService _instance =
      AuthInitializationService._internal();
  factory AuthInitializationService() => _instance;
  AuthInitializationService._internal();

  final TokenService _tokenService = TokenService();
  final ApiClient _apiClient = ApiClient();

  bool _isInitialized = false;
  bool get isInitialized => _isInitialized;

  /// Inicializa el estado de autenticaci√≥n al arrancar la app
  Future<AuthInitializationResult> initializeAuth() async {
    try {
      developer.log(
        'üöÄ Iniciando inicializaci√≥n de autenticaci√≥n...',
        name: 'AuthInit',
      );

      // 1. Verificar si hay tokens guardados
      final hasTokens = await _tokenService.hasTokens();
      developer.log('üîç Tokens disponibles: $hasTokens', name: 'AuthInit');

      if (!hasTokens) {
        developer.log('‚ùå No hay tokens disponibles', name: 'AuthInit');
        _isInitialized = true;
        return AuthInitializationResult(
          isAuthenticated: false,
          needsLogin: true,
          message: 'No hay sesi√≥n activa',
        );
      }

      // 2. Verificar si los tokens son v√°lidos
      final hasValidToken = await _tokenService.hasValidAccessToken();
      developer.log('üîç Token v√°lido: $hasValidToken', name: 'AuthInit');

      if (hasValidToken) {
        // Token v√°lido, verificar sesiones
        final userSessionActive = await UserSessionService.isSessionActive();
        final driverSessionActive =
            await DriverSessionService.isSessionActive();

        developer.log(
          'üë§ Sesi√≥n usuario: $userSessionActive',
          name: 'AuthInit',
        );
        developer.log(
          'üöó Sesi√≥n conductor: $driverSessionActive',
          name: 'AuthInit',
        );

        _isInitialized = true;
        return AuthInitializationResult(
          isAuthenticated: true,
          needsLogin: false,
          hasUserSession: userSessionActive,
          hasDriverSession: driverSessionActive,
          message: 'Sesi√≥n activa v√°lida',
        );
      }

      // 3. Token no v√°lido, intentar refrescar
      developer.log(
        'üîÑ Token no v√°lido, intentando refrescar...',
        name: 'AuthInit',
      );
      final refreshed = await _attemptTokenRefresh();

      if (refreshed) {
        // Refresh exitoso, verificar sesiones nuevamente
        final userSessionActive = await UserSessionService.isSessionActive();
        final driverSessionActive =
            await DriverSessionService.isSessionActive();

        _isInitialized = true;
        return AuthInitializationResult(
          isAuthenticated: true,
          needsLogin: false,
          hasUserSession: userSessionActive,
          hasDriverSession: driverSessionActive,
          message: 'Sesi√≥n restaurada exitosamente',
        );
      }

      // 4. No se pudo refrescar, limpiar tokens inv√°lidos
      developer.log(
        '‚ùå No se pudo refrescar token, limpiando...',
        name: 'AuthInit',
      );
      await _cleanupInvalidTokens();

      _isInitialized = true;
      return AuthInitializationResult(
        isAuthenticated: false,
        needsLogin: true,
        message: 'Sesi√≥n expirada, se requiere login',
      );
    } catch (e) {
      developer.log('‚ùå Error en inicializaci√≥n: $e', name: 'AuthInit');

      // En caso de error, limpiar todo y requerir login
      await _cleanupInvalidTokens();

      _isInitialized = true;
      return AuthInitializationResult(
        isAuthenticated: false,
        needsLogin: true,
        message: 'Error en inicializaci√≥n, se requiere login',
        error: e.toString(),
      );
    }
  }

  /// Intenta refrescar el token usando el refresh token
  Future<bool> _attemptTokenRefresh() async {
    try {
      final refreshToken = await _tokenService.getRefreshToken();
      if (refreshToken == null) {
        developer.log('‚ùå No hay refresh token disponible', name: 'AuthInit');
        return false;
      }

      developer.log(
        'üîÑ Intentando refresh con token disponible...',
        name: 'AuthInit',
      );

      // Hacer petici√≥n de refresh directamente
      final response = await _apiClient.post('/api/auth/refresh', {});

      developer.log('‚úÖ Refresh exitoso', name: 'AuthInit');
      return true;
    } catch (e) {
      developer.log('‚ùå Error en refresh: $e', name: 'AuthInit');
      return false;
    }
  }

  /// Limpia tokens inv√°lidos y sesiones
  Future<void> _cleanupInvalidTokens() async {
    try {
      developer.log(
        'üßπ Limpiando tokens y sesiones inv√°lidas...',
        name: 'AuthInit',
      );

      await _tokenService.clearTokens();
      await UserSessionService.clearUserSession();
      await DriverSessionService.clearDriverSession();

      developer.log('‚úÖ Limpieza completada', name: 'AuthInit');
    } catch (e) {
      developer.log('‚ùå Error en limpieza: $e', name: 'AuthInit');
    }
  }

  /// Verifica si el usuario est√° autenticado antes de hacer una petici√≥n
  Future<bool> ensureAuthenticated() async {
    try {
      if (!_isInitialized) {
        developer.log(
          '‚ö†Ô∏è Auth no inicializado, inicializando...',
          name: 'AuthInit',
        );
        final result = await initializeAuth();
        return result.isAuthenticated;
      }

      // Verificar si tenemos un token v√°lido
      final hasValidToken = await _tokenService.hasValidAccessToken();
      if (hasValidToken) {
        return true;
      }

      // Intentar refrescar si no es v√°lido
      developer.log(
        'üîÑ Token no v√°lido, intentando refrescar...',
        name: 'AuthInit',
      );
      return await _attemptTokenRefresh();
    } catch (e) {
      developer.log('‚ùå Error verificando autenticaci√≥n: $e', name: 'AuthInit');
      return false;
    }
  }

  /// Reinicia el estado de inicializaci√≥n (√∫til despu√©s de login/logout)
  void resetInitialization() {
    _isInitialized = false;
    developer.log('üîÑ Estado de inicializaci√≥n reiniciado', name: 'AuthInit');
  }

  /// Obtiene informaci√≥n detallada del estado de autenticaci√≥n
  Future<String> getAuthStatusInfo() async {
    try {
      final hasTokens = await _tokenService.hasTokens();
      final hasValidToken = await _tokenService.hasValidAccessToken();
      final tokenInfo = await _tokenService.getTokenInfo();
      final userSession = await UserSessionService.isSessionActive();
      final driverSession = await DriverSessionService.isSessionActive();

      return '''
üîç Estado de Autenticaci√≥n:
- Inicializado: $_isInitialized
- Tokens disponibles: $hasTokens
- Token v√°lido: $hasValidToken
- Sesi√≥n usuario: $userSession
- Sesi√≥n conductor: $driverSession
- Detalles tokens: $tokenInfo
''';
    } catch (e) {
      return 'Error obteniendo estado: $e';
    }
  }
}

/// Resultado de la inicializaci√≥n de autenticaci√≥n
class AuthInitializationResult {
  final bool isAuthenticated;
  final bool needsLogin;
  final bool hasUserSession;
  final bool hasDriverSession;
  final String message;
  final String? error;

  AuthInitializationResult({
    required this.isAuthenticated,
    required this.needsLogin,
    this.hasUserSession = false,
    this.hasDriverSession = false,
    required this.message,
    this.error,
  });

  @override
  String toString() {
    return 'AuthInitResult(auth: $isAuthenticated, needsLogin: $needsLogin, user: $hasUserSession, driver: $hasDriverSession, msg: $message)';
  }
}
