import 'package:flutter/material.dart';
import 'package:joya_express/core/constants/app_colors.dart';
import 'package:joya_express/core/constants/app_strings.dart';
import 'package:joya_express/presentation/modules/auth/Driver/viewmodels/driver_auth_viewmodel.dart';
import 'package:joya_express/presentation/modules/auth/Driver/widgets/driver_header_drawer.dart';
import 'package:joya_express/presentation/modules/routes/app_routes.dart';
import 'package:joya_express/shared/widgets/confirmation_dialog.dart';
import 'package:joya_express/shared/widgets/drawer_menu_item.dart';
import 'package:provider/provider.dart';

/// DriverDrawer
/// ------------
/// Widget que representa el Drawer lateral de la aplicaci√≥n para conductores.
/// Muestra la informaci√≥n del conductor en la cabecera y una lista de opciones de men√∫.
/// Permite navegar a diferentes secciones y cerrar sesi√≥n.
class DriverDrawer extends StatelessWidget {
  const DriverDrawer({super.key});

  @override
  Widget build(BuildContext context) {
    return Drawer(
      backgroundColor: AppColors.surface,
      child: Column(
        children: [
          // Cabecera del Drawer con informaci√≥n del conductor
          Consumer<DriverAuthViewModel>(
            builder: (context, driverAuthViewModel, child) {
              return DriverDrawerHeader(
                driver: driverAuthViewModel.currentDriver,
              );
            },
          ),

          // Espaciado
          const SizedBox(height: 20),

          // Opciones del men√∫
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(horizontal: 12),
              children: [
                // Opci√≥n: Perfil del conductor
                DrawerMenuItem(
                  icon: Icons.person_outline,
                  title: 'Perfil',
                  onTap: () => _navigateToProfile(context),
                ),
                const SizedBox(height: 8),

                // Opci√≥n: Historial de viajes
                DrawerMenuItem(
                  icon: Icons.history_outlined,
                  title: 'Historial de viajes',
                  onTap: () => _navigateToHistory(context),
                ),
                const SizedBox(height: 8),

                // Opci√≥n: Estad√≠sticas/Ganancias
                DrawerMenuItem(
                  icon: Icons.bar_chart_outlined,
                  title: 'Estad√≠sticas',
                  onTap: () => _navigateToStats(context),
                ),
                const SizedBox(height: 8),

                // Opci√≥n: Veh√≠culo
                DrawerMenuItem(
                  icon: Icons.directions_car_outlined,
                  title: 'Mi veh√≠culo',
                  onTap: () => _navigateToVehicle(context),
                ),
                const SizedBox(height: 8),

                // Opci√≥n: Configuraci√≥n
                DrawerMenuItem(
                  icon: Icons.settings_outlined,
                  title: 'Configuraci√≥n',
                  onTap: () => _navigateToConfiguration(context),
                ),

                const SizedBox(height: 20),

                // Separador Visual
                const Divider(
                  color: AppColors.border,
                  thickness: 1,
                  indent: 8,
                  endIndent: 8,
                ),
                const SizedBox(height: 8),

                // Opci√≥n: Soporte/Ayuda
                DrawerMenuItem(
                  icon: Icons.help_outline,
                  title: 'Ayuda y soporte',
                  onTap: () => _navigateToSupport(context),
                ),
                const SizedBox(height: 8),

                // Opci√≥n: Cerrar sesi√≥n
                DrawerMenuItem(
                  icon: Icons.logout_outlined,
                  title: 'Cerrar sesi√≥n',
                  iconColor: AppColors.primary,
                  textColor: AppColors.primary,
                  onTap: () => _showLogoutDialog(context),
                ),

                // Opci√≥n: Cambiar a modo pasajero (si aplica)
                const SizedBox(height: 8),
                DrawerMenuItem(
                  icon: Icons.person_outline,
                  title: 'Cambiar a pasajero',
                  iconColor: const Color(0xFF2196F3),
                  textColor: const Color(0xFF2196F3),
                  onTap: () => _switchToPassenger(context),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// Navega a la pantalla de perfil del conductor
  void _navigateToProfile(BuildContext context) {
    Navigator.pop(context); // Cerrar drawer
    Navigator.pushNamed(context, '/driver-profile');
  }

  /// Navega al historial de viajes
  void _navigateToHistory(BuildContext context) {
    Navigator.pop(context);
    // TODO: Implementar navegaci√≥n al historial de viajes
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Historial de viajes - Pr√≥ximamente')),
    );
  }

  /// Navega a estad√≠sticas/ganancias
  void _navigateToStats(BuildContext context) {
    Navigator.pop(context);
    // TODO: Implementar navegaci√≥n a estad√≠sticas
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Estad√≠sticas - Pr√≥ximamente')),
    );
  }

  /// Navega a informaci√≥n del veh√≠culo
  void _navigateToVehicle(BuildContext context) {
    Navigator.pop(context);
    // TODO: Implementar navegaci√≥n a veh√≠culo
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(const SnackBar(content: Text('Mi veh√≠culo - Pr√≥ximamente')));
  }

  /// Navega a configuraci√≥n
  void _navigateToConfiguration(BuildContext context) {
    Navigator.pop(context);
    // TODO: Implementar navegaci√≥n a configuraci√≥n
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Configuraci√≥n - Pr√≥ximamente')),
    );
  }

  /// Navega a soporte/ayuda
  void _navigateToSupport(BuildContext context) {
    Navigator.pop(context);
    // TODO: Implementar navegaci√≥n a soporte
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Ayuda y soporte - Pr√≥ximamente')),
    );
  }

  /// Cambia a modo pasajero sin cerrar la sesi√≥n del conductor
  void _switchToPassenger(BuildContext context) async {
    // Obt√©n el DriverAuthViewModel antes de cerrar el Drawer
    final driverAuthViewModel = Provider.of<DriverAuthViewModel>(
      context,
      listen: false,
    );

    // Cierra el Drawer primero
    Navigator.pop(context);

    try {
      print('üîÑ Iniciando cambio a modo pasajero desde drawer...');

      // Desactiva el modo conductor pero mantiene la sesi√≥n activa
      final success = await driverAuthViewModel.switchToPassengerMode();

      if (success) {
        print('‚úÖ Cambio a modo pasajero exitoso, navegando al home...');

        // Usar addPostFrameCallback para asegurar que la navegaci√≥n ocurra despu√©s del build
        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (context.mounted) {
            Navigator.pushNamedAndRemoveUntil(
              context,
              AppRoutes.home, // Pantalla principal de pasajero
              (route) => false,
              arguments: {'isRoleChange': true}, // Indicar que es cambio de rol
            );
            print(
              'üöÄ Navegaci√≥n al home de pasajero completada con reseteo de mapa',
            );
          }
        });
      } else {
        print('‚ùå Error en cambio a modo pasajero');
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('No se pudo cambiar al modo pasajero'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      print('‚ùå Error en _switchToPassenger: $e');
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error al cambiar a modo pasajero: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  /// Muestra el di√°logo de confirmaci√≥n para cerrar sesi√≥n
  void _showLogoutDialog(BuildContext context) async {
    // Obt√©n el DriverAuthViewModel antes de cerrar el Drawer
    final driverAuthViewModel = Provider.of<DriverAuthViewModel>(
      context,
      listen: false,
    );

    // Cierra el Drawer primero
    Navigator.pop(context);

    // Espera a que el di√°logo se cierre y el usuario confirme
    final confirmed = await ConfirmationDialog.showLogoutDialog(
      context,
      () {}, // No hagas logout aqu√≠, solo cierra el di√°logo
    );

    // Si el usuario confirm√≥, realiza el logout y navega
    if (confirmed == true) {
      try {
        await driverAuthViewModel.logout();

        // Usar addPostFrameCallback para asegurar que la navegaci√≥n ocurra despu√©s del build
        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (context.mounted) {
            Navigator.pushNamedAndRemoveUntil(
              context,
              AppRoutes.home, // Pantalla principal de pasajero
              (route) => false,
            );
          }
        });
      } catch (e) {
        // Manejar errores de logout
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Error al cerrar sesi√≥n: ${e.toString()}'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }
}
