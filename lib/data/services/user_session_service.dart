import 'dart:convert';
import 'package:joya_express/core/network/api_client.dart';
import 'package:joya_express/core/network/api_endpoints.dart';
import 'package:joya_express/core/services/token_service.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:developer' as developer;

/// Servicio para manejar la persistencia de la sesi√≥n del usuario
/// Ahora usa TokenService para manejo de tokens JWT
class UserSessionService {
  static final TokenService _tokenService = TokenService();

  // Claves para SharedPreferences (mantenidas para compatibilidad)
  static const String _lastActivityKey = 'user_last_activity';
  static const String _userSessionActiveKey = 'user_session_active';

  /// Registra actividad del usuario para mantener la sesi√≥n activa
  static Future<void> registerActivity() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      await prefs.setInt(_lastActivityKey, timestamp);

      // Asegurar que la sesi√≥n est√° marcada como activa si hay tokens
      final hasTokens = await _tokenService.hasTokens();
      if (hasTokens) {
        await prefs.setBool(_userSessionActiveKey, true);
        developer.log(
          'üë§ Actividad de usuario registrada: ${DateTime.now()}',
          name: 'UserSessionService',
        );
      }
    } catch (e) {
      developer.log(
        '‚ùå Error registrando actividad de usuario: $e',
        name: 'UserSessionService',
      );
    }
  }

  /// Verifica si la sesi√≥n del usuario est√° activa
  static Future<bool> isSessionActive() async {
    try {
      // Usar TokenService como fuente principal de verdad
      final hasActiveSession = await _tokenService.hasActiveSession();

      if (hasActiveSession) {
        developer.log(
          '‚úÖ Sesi√≥n activa verificada por TokenService',
          name: 'UserSessionService',
        );

        // Sincronizar el flag de sesi√≥n activa
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool(_userSessionActiveKey, true);

        return true;
      }

      // Si no hay sesi√≥n activa en TokenService, verificar flags locales como fallback
      final prefs = await SharedPreferences.getInstance();
      final isActive = prefs.getBool(_userSessionActiveKey) ?? false;

      if (isActive) {
        developer.log(
          '‚ö†Ô∏è Flag de sesi√≥n activa pero sin tokens v√°lidos, limpiando...',
          name: 'UserSessionService',
        );
        await prefs.setBool(_userSessionActiveKey, false);
      }

      developer.log('‚ùå No hay sesi√≥n activa', name: 'UserSessionService');
      return false;
    } catch (e) {
      developer.log(
        '‚ùå Error verificando sesi√≥n de usuario: $e',
        name: 'UserSessionService',
      );
      return false;
    }
  }

  /// Activa la sesi√≥n de usuario
  static Future<void> activateUserSession() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_userSessionActiveKey, true);
      await registerActivity();

      developer.log(
        'üë§ Sesi√≥n de usuario activada',
        name: 'UserSessionService',
      );
    } catch (e) {
      developer.log(
        '‚ùå Error activando sesi√≥n de usuario: $e',
        name: 'UserSessionService',
      );
    }
  }

  /// Guarda datos b√°sicos del usuario para persistencia
  static Future<void> saveUserData(Map<String, dynamic> userData) async {
    try {
      // Usar TokenService para guardar datos de usuario
      await _tokenService.updateUserData(userData);

      // Asegurar que la sesi√≥n est√° marcada como activa
      await activateUserSession();

      developer.log(
        'üíæ Datos de usuario guardados',
        name: 'UserSessionService',
      );
    } catch (e) {
      developer.log(
        '‚ùå Error guardando datos de usuario: $e',
        name: 'UserSessionService',
      );
    }
  }

  /// Limpia la sesi√≥n del usuario
  static Future<void> clearUserSession() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // Limpiar flags locales
      await prefs.remove(_lastActivityKey);
      await prefs.remove(_userSessionActiveKey);
      await prefs.setBool(_userSessionActiveKey, false);

      // Limpiar tokens usando TokenService
      await _tokenService.clearTokens();

      developer.log(
        'üë§ Sesi√≥n de usuario limpiada completamente',
        name: 'UserSessionService',
      );
    } catch (e) {
      developer.log(
        '‚ùå Error limpiando sesi√≥n de usuario: $e',
        name: 'UserSessionService',
      );
    }
  }

  /// Obtiene los datos del usuario guardados
  static Future<Map<String, dynamic>?> getUserData() async {
    try {
      // Usar TokenService para obtener datos de usuario
      return await _tokenService.getUserData();
    } catch (e) {
      developer.log(
        '‚ùå Error obteniendo datos de usuario: $e',
        name: 'UserSessionService',
      );
      return null;
    }
  }

  /// Intenta refrescar el token de autenticaci√≥n
  static Future<bool> refreshToken() async {
    try {
      developer.log(
        'üîÑ Intentando refrescar token de usuario...',
        name: 'UserSessionService',
      );

      // Verificar si tenemos tokens antes del refresh
      final hasTokens = await _tokenService.hasTokens();
      if (!hasTokens) {
        developer.log(
          '‚ùå No hay tokens para refrescar',
          name: 'UserSessionService',
        );
        return false;
      }

      final tokenInfo = await _tokenService.getTokenInfo();
      developer.log(
        'üç™ Estado de tokens antes del refresh: $tokenInfo',
        name: 'UserSessionService',
      );

      // Usar ApiClient para hacer el refresh (que internamente usa TokenService)
      final apiClient = ApiClient();

      try {
        // Hacer una petici√≥n de refresh directamente
        final response = await apiClient.post(ApiEndpoints.refresh, {});
        developer.log(
          '‚úÖ Respuesta del refresh recibida',
          name: 'UserSessionService',
        );

        // Registrar actividad para mantener la sesi√≥n activa
        await registerActivity();

        final newTokenInfo = await _tokenService.getTokenInfo();
        developer.log(
          'üç™ Estado de tokens despu√©s del refresh: $newTokenInfo',
          name: 'UserSessionService',
        );

        return true;
      } catch (refreshError) {
        developer.log(
          '‚ùå Error en petici√≥n de refresh: $refreshError',
          name: 'UserSessionService',
        );

        // Si es un error de refresh token requerido, no podemos continuar
        if (refreshError.toString().contains('Refresh token requerido') ||
            refreshError.toString().contains('refresh token required')) {
          developer.log(
            '‚ùå Refresh token no v√°lido o expirado',
            name: 'UserSessionService',
          );
          return false;
        }

        return false;
      }
    } catch (e) {
      developer.log(
        '‚ùå Error refrescando token: $e',
        name: 'UserSessionService',
      );
      return false;
    }
  }

  /// Sincronizar sesi√≥n despu√©s del login exitoso
  static Future<void> syncSessionAfterLogin() async {
    try {
      developer.log(
        'üîÑ Sincronizando sesi√≥n despu√©s del login...',
        name: 'UserSessionService',
      );

      // Verificar estado de tokens
      final tokenInfo = await _tokenService.getTokenInfo();
      developer.log(
        'üç™ Estado de tokens despu√©s del login: $tokenInfo',
        name: 'UserSessionService',
      );

      // Activar sesi√≥n si hay tokens v√°lidos
      final hasTokens = await _tokenService.hasTokens();
      if (hasTokens) {
        await activateUserSession();
        developer.log(
          '‚úÖ Sesi√≥n sincronizada exitosamente',
          name: 'UserSessionService',
        );
      } else {
        developer.log(
          '‚ö†Ô∏è No se encontraron tokens despu√©s del login',
          name: 'UserSessionService',
        );
      }
    } catch (e) {
      developer.log(
        '‚ùå Error sincronizando sesi√≥n: $e',
        name: 'UserSessionService',
      );
    }
  }

  /// Verificar y reparar sesi√≥n si es necesario
  static Future<bool> verifyAndRepairSession() async {
    try {
      developer.log(
        'üîç Verificando integridad de la sesi√≥n...',
        name: 'UserSessionService',
      );

      final sessionActive = await isSessionActive();
      final hasTokens = await _tokenService.hasTokens();
      final hasValidToken = await _tokenService.hasValidAccessToken();

      developer.log(
        'üìä Estado de sesi√≥n: activa=$sessionActive, tokens=$hasTokens, v√°lido=$hasValidToken',
        name: 'UserSessionService',
      );

      // Si la sesi√≥n est√° activa y hay tokens v√°lidos, todo est√° bien
      if (sessionActive && hasTokens && hasValidToken) {
        developer.log('‚úÖ Sesi√≥n √≠ntegra', name: 'UserSessionService');
        return true;
      }

      // Si hay tokens pero no son v√°lidos, intentar refrescar
      if (hasTokens && !hasValidToken) {
        developer.log(
          'üîß Tokens presentes pero no v√°lidos, intentando refrescar...',
          name: 'UserSessionService',
        );
        final refreshed = await refreshToken();

        if (refreshed) {
          await activateUserSession();
          developer.log(
            '‚úÖ Sesi√≥n reparada exitosamente',
            name: 'UserSessionService',
          );
          return true;
        }
      }

      // Si no se puede reparar, limpiar todo
      developer.log(
        '‚ùå No se pudo reparar la sesi√≥n, limpiando...',
        name: 'UserSessionService',
      );
      await clearUserSession();
      return false;
    } catch (e) {
      developer.log(
        '‚ùå Error verificando sesi√≥n: $e',
        name: 'UserSessionService',
      );
      return false;
    }
  }

  /// Guarda tokens despu√©s del login/registro
  static Future<void> saveTokens({
    required String accessToken,
    required String refreshToken,
    Map<String, dynamic>? userData,
  }) async {
    try {
      await _tokenService.saveTokens(
        accessToken: accessToken,
        refreshToken: refreshToken,
        userData: userData,
      );

      await activateUserSession();
      developer.log(
        '‚úÖ Tokens guardados y sesi√≥n activada',
        name: 'UserSessionService',
      );
    } catch (e) {
      developer.log('‚ùå Error guardando tokens: $e', name: 'UserSessionService');
      rethrow;
    }
  }

  /// Obtiene informaci√≥n de tokens para debugging
  static Future<String> getTokenInfo() async {
    return await _tokenService.getTokenInfo();
  }

  /// Verifica si hay tokens v√°lidos
  static Future<bool> hasValidTokens() async {
    return await _tokenService.hasValidAccessToken();
  }

  /// Verifica si hay tokens (v√°lidos o no)
  static Future<bool> hasTokens() async {
    return await _tokenService.hasTokens();
  }
}
