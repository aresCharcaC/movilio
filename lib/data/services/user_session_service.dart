import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';

/// Servicio para manejar la persistencia de la sesi√≥n del usuario
/// A diferencia del DriverSessionService, esta sesi√≥n no expira autom√°ticamente
class UserSessionService {
  // Claves para SharedPreferences
  static const String _lastActivityKey = 'user_last_activity';
  static const String _userSessionActiveKey = 'user_session_active';
  static const String _userDataKey = 'user_data';
  static const String _userTokenKey = 'user_token';
  static const String _userIdKey = 'user_id';

  /// Registra actividad del usuario para mantener la sesi√≥n activa
  static Future<void> registerActivity() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      await prefs.setInt(_lastActivityKey, timestamp);

      // Asegurar que la sesi√≥n est√° marcada como activa
      await prefs.setBool(_userSessionActiveKey, true);

      print('üë§ Actividad de usuario registrada: ${DateTime.now()}');

      // Verificar si hay datos de usuario guardados
      final hasUserData = prefs.containsKey(_userDataKey);
      if (!hasUserData) {
        print(
          '‚ö†Ô∏è No hay datos de usuario guardados, pero la sesi√≥n est√° activa',
        );
      }
    } catch (e) {
      print('‚ùå Error registrando actividad de usuario: $e');
    }
  }

  /// Verifica si la sesi√≥n del usuario est√° activa
  /// A diferencia del conductor, la sesi√≥n de usuario no expira por inactividad
  static Future<bool> isSessionActive() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // Verificar m√∫ltiples indicadores de sesi√≥n activa
      final isActive = prefs.getBool(_userSessionActiveKey) ?? false;
      final hasUserData = prefs.containsKey(_userDataKey);
      final hasUserId = prefs.containsKey(_userIdKey);
      final hasToken = prefs.containsKey(_userTokenKey);

      print(
        'üë§ Verificaci√≥n de sesi√≥n: isActive=$isActive, hasUserData=$hasUserData, hasUserId=$hasUserId, hasToken=$hasToken',
      );

      // Priorizar la existencia de datos de usuario sobre el flag de sesi√≥n activa
      if (hasUserData || hasUserId || hasToken) {
        // Si hay cualquier dato de usuario, asegurar que la sesi√≥n est√° marcada como activa
        await prefs.setBool(_userSessionActiveKey, true);
        await registerActivity();
        print('üîÑ Sesi√≥n de usuario reactivada desde datos guardados');
        return true;
      } else if (isActive) {
        // Si solo el flag est√° activo pero no hay datos, verificar si es un caso v√°lido
        await registerActivity();
        return true;
      }

      print(
        'üë§ Sesi√≥n de usuario activa: ${hasUserData || hasUserId || hasToken || isActive}',
      );
      return hasUserData || hasUserId || hasToken || isActive;
    } catch (e) {
      print('‚ùå Error verificando sesi√≥n de usuario: $e');
      return false;
    }
  }

  /// Activa la sesi√≥n de usuario y registra actividad
  static Future<void> activateUserSession() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // Establecer m√∫ltiples indicadores de sesi√≥n activa
      await prefs.setBool(_userSessionActiveKey, true);

      // Si no hay datos de usuario, asegurar que al menos haya un ID temporal
      if (!prefs.containsKey(_userDataKey) && !prefs.containsKey(_userIdKey)) {
        await prefs.setString(
          _userIdKey,
          'temp_user_${DateTime.now().millisecondsSinceEpoch}',
        );
        print('‚ö†Ô∏è No hay datos de usuario, creando ID temporal');
      }

      await registerActivity();
      print('üë§ Sesi√≥n de usuario activada con m√∫ltiples indicadores');
    } catch (e) {
      print('‚ùå Error activando sesi√≥n de usuario: $e');
    }
  }

  /// Guarda datos b√°sicos del usuario para persistencia
  static Future<void> saveUserData(Map<String, dynamic> userData) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // Guardar datos en formato JSON para mejor persistencia
      await prefs.setString(_userDataKey, jsonEncode(userData));

      // Guardar ID de usuario por separado para verificaci√≥n r√°pida
      if (userData.containsKey('id')) {
        await prefs.setString(_userIdKey, userData['id'].toString());
      }

      // Guardar token si existe
      if (userData.containsKey('token')) {
        await prefs.setString(_userTokenKey, userData['token'].toString());
      }

      // Asegurar que la sesi√≥n est√° marcada como activa
      await prefs.setBool(_userSessionActiveKey, true);

      print('üíæ Datos de usuario guardados para persistencia mejorada');
    } catch (e) {
      print('‚ùå Error guardando datos de usuario: $e');
    }
  }

  /// Limpia la sesi√≥n del usuario
  static Future<void> clearUserSession() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // Limpiar todos los datos relacionados con la sesi√≥n
      await prefs.remove(_lastActivityKey);
      await prefs.remove(_userSessionActiveKey);
      await prefs.remove(_userDataKey);
      await prefs.remove(_userIdKey);
      await prefs.remove(_userTokenKey);

      // Verificaci√≥n adicional para asegurar que la sesi√≥n est√° inactiva
      await prefs.setBool(_userSessionActiveKey, false);

      print('üë§ Sesi√≥n de usuario limpiada completamente');
    } catch (e) {
      print('‚ùå Error limpiando sesi√≥n de usuario: $e');
    }
  }

  /// Obtiene los datos del usuario guardados
  static Future<Map<String, dynamic>?> getUserData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final userData = prefs.getString(_userDataKey);

      if (userData != null) {
        try {
          return jsonDecode(userData) as Map<String, dynamic>;
        } catch (e) {
          print('‚ö†Ô∏è Error decodificando datos de usuario: $e');
          return null;
        }
      }
      return null;
    } catch (e) {
      print('‚ùå Error obteniendo datos de usuario: $e');
      return null;
    }
  }
}
